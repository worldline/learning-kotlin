package com.worldline.training.ktor_quiz_collector.routes

import com.worldline.training.ktor_quiz_collector.utils.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.html.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import kotlinx.html.*
import org.jetbrains.kotlinx.dataframe.api.dataFrameOf
import org.jetbrains.kotlinx.kandy.dsl.plot
import org.jetbrains.kotlinx.kandy.letsplot.export.toHTML
import org.jetbrains.kotlinx.kandy.letsplot.export.toSVG
import org.jetbrains.kotlinx.kandy.letsplot.layers.bars


fun Application.configureQuizCollector() {
    routing {
        post("/respond") {
            val quizResponse = call.receive<QuizResponse>()
            quizResponses.add(quizResponse)
            call.respond(CollectResponse(quizResponse.score))
        }

        get("/raw-responses") {
            call.respond(quizResponses)
        }

        get("/reset") {
            quizResponses.clear()
            call.respond(HttpStatusCode.OK)
        }

        get("/parts/graphs") {
            call.respondHtml {
                body {
                    div {
                        unsafe { +generateCorrectQuestionsPlot().toSVG() }
                        unsafe { +generateLeaderBoardPlot().toSVG() }
                    }
                }
            }
        }

        get("/") {
            call.respondHtml {
                head {
                    title = "Quiz Collector"
                    link(rel = "stylesheet", href = "/styles-graph.css", type = "text/css")
                    script {
                        src = "/static/auto-reload.js"
                    }
                }
                body {
                    h1 { +"Ktor + Kandy Quiz Collector ðŸ“Š" }
                    p {
                        +"Pages are generated on the server side with Kotlinx.HTML and Kotlinx.CSS"
                    }
                    p {
                        +"The plots are generated by Kandy and displayed as SVG"
                    }
                    div {
                        id = "graphs"
                        unsafe { +generateCorrectQuestionsPlot().toSVG() }
                        unsafe { +generateLeaderBoardPlot().toSVG() }
                    }
                }
            }
        }

        get("/no-polling") {
            call.respondHtml {
                head {
                    title = "Quiz Collector"
                    link(rel = "stylesheet", href = "/styles-graph.css", type = "text/css")
                }
                body {
                    h1 { +"Ktor + Kandy Quiz Collector ðŸ“Š" }
                    div {
                        unsafe { +generateCorrectQuestionsPlot().toSVG() }
                        unsafe { +generateLeaderBoardPlot().toSVG() }
                    }
                }
            }
        }
        get("/ui/correct") {
            val correctStats = getCorrectStats()
            val statsDataFrame = dataFrameOf("question" to correctStats.map { it.question },
                "correct" to correctStats.map { it.correct })
            val html = statsDataFrame.plot {
                bars {
                    y("question")
                    x("correct")
                }
            }.toHTML(false)
            call.respondText(html, ContentType.Text.Html)
        }
    }
}