import{_ as c,c as r,a as o,b as e,d as t,r as l,o as u,e as n,f as s}from"./app-D-YqA8eI.js";const d={};function k(m,a){const p=l("CodeGroupItem"),i=l("CodeGroup");return u(),r("div",null,[a[2]||(a[2]=o(`<h1 id="📚-backend-development" tabindex="-1"><a class="header-anchor" href="#📚-backend-development"><span>📚 Backend development</span></a></h1><p>Many frameworks officially support Kotlin: <a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="noopener noreferrer">Spring</a>, <a href="https://quarkus.io/guides/kotlin" target="_blank" rel="noopener noreferrer">Quarkus</a>, <a href="https://github.com/ktorio/ktor" target="_blank" rel="noopener noreferrer">Ktor</a>, among others <a href="https://kotlinlang.org/docs/server-overview.html#deploying-kotlin-server-side-applications" target="_blank" rel="noopener noreferrer">listed here</a>.</p><p>In addition to that, Kotlin is theoretically compatible with any framework that targets the JVM or JS. For example, this tutorial shows <a href="https://medium.com/@touskar/une-application-node.js-avec-kotlin-1969994fb1d2" target="_blank" rel="noopener noreferrer">how to use node.js with Kotlin</a>. However, frameworks that do not officially support Kotlin may require some tweaking to use it.</p><h2 id="ktor" tabindex="-1"><a class="header-anchor" href="#ktor"><span>Ktor</span></a></h2><p>Ktor is a cross-platform Kotlin library for building both HTTP clients and servers. This makes Ktor a useful library to learn for both front-end developers for its HTTP client capabilities and backend-development for its HTTP server capabilities. In the following, we&#39;ll create a REST API with Ktor server.</p><h3 id="🧪-develop-an-api-with-ktor" tabindex="-1"><a class="header-anchor" href="#🧪-develop-an-api-with-ktor"><span>🧪 develop an API with Ktor</span></a></h3><ul><li>Create a project on <a href="https://start.ktor.io/" target="_blank" rel="noopener noreferrer">start.ktor.io</a> with the following plugins: Content Negotiation, kotlinx.serialization, and Routing.</li><li>Click on &quot;Generate project&quot;.</li><li>Download the archive, unzip it, and open the project with IntelliJ.</li><li>Create a <code>models</code> package and add to it a <code>Customer</code> data class with these immutable properties <code>id: String, firstName: String, lastName: String, email: String</code>.</li><li>Annotate the class with <code>@Serializable</code>.</li><li>Create a new package named <code>routes</code> and add to it a file <code>CustomerRoutes.kt</code> that will contain the code for the <code>/customer</code> endpoint.</li><li>The code below provides the implementation of some endpoints. Please implement the remaining ones.</li><li>To enable the route call <code>customerRouting()</code> in the routing configuration file located in <code>plugins/Routing.kt</code>.</li><li>For simplicity, use a global in-memory list of customers <code>val store = mutableListOf&lt;Customer&gt;()</code>.</li><li>Run the server by running the main method.</li><li>Test the api on the IDE by using an http file or using any other client.</li></ul><details class="hint-container details"><summary>CustomerRoutes.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> Route<span class="token punctuation">.</span><span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">route</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span></span>
<span class="line">            call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string-literal singleline"><span class="token string">&quot;Missing id&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>BadRequest</span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">val</span> customer <span class="token operator">=</span></span>
<span class="line">                store<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span> <span class="token operator">?:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string-literal singleline"><span class="token string">&quot;No customer with id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">id</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound</span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line">            call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        post <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> customer <span class="token operator">=</span> call<span class="token punctuation">.</span>receive<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span></span>
<span class="line">            call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Customer stored correctly&quot;</span></span><span class="token punctuation">,</span> status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>Created<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>plugins/Routing.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    routing <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">return@label</p><p>You can specify which level you want to return with an explicit label using <code>return@lambda</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">lambdaA <span class="token punctuation">{</span></span>
<span class="line">    lambdaB <span class="token punctuation">{</span></span>
<span class="line">        lambdaC <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> randomInt <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>randomInt <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaC</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaB</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;In lambdaB&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiaW1wb3J0IGtvdGxpbi5yYW5kb20uUmFuZG9tXG5cbi8vIHJldHVybiB3aXRoIGltcGxpY2l0IGxhYmVsc1xuXG5mdW4gbWFpbigpIHtcbiAgIHZhbCBrb3RsaW4gPSBcIvCfmYJcIlxuICAga290bGluLmxldCB7XG4gICAgICAgaXQuYXBwbHkge1xuXHRcdFx0dmFsIHJhbmRvbUludCA9IFJhbmRvbS5uZXh0SW50KDAsIDEwMClcbiAgICAgICAgICAgIHByaW50bG4ocmFuZG9tSW50KVxuICAgICAgICAgICAgaWYgKHJhbmRvbUludCA+IDUwKSByZXR1cm5AYXBwbHkgZWxzZSByZXR1cm5AbGV0XG4gICAgICAgfVxuICAgICAgIHByaW50bG4oXCJpbnQgbGV0IGFmdGVyIGFwcGx5XCIpXG4gICB9XG59In0=" target="_blank" rel="noopener noreferrer">This code runs another example</a>.</p></div><details class="hint-container details"><summary>CustomerTest.http</summary><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">POST http://127.0.0.1:8080/customer</span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span></span>
<span class="line"><span class="token application-json"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jane.smith@company.com&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">POST</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer</span>
<span class="line">Content<span class="token operator">-</span>Type<span class="token operator">:</span> application<span class="token operator">/</span>json</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john.smith@company.com&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">POST</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer</span>
<span class="line">Content<span class="token operator">-</span>Type<span class="token operator">:</span> application<span class="token operator">/</span>json</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;300&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mary.smith@company.com&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">GET</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer</span>
<span class="line"><span class="token literal-property property">Accept</span><span class="token operator">:</span> application<span class="token operator">/</span>json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">GET</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer<span class="token operator">/</span><span class="token number">200</span></span>
<span class="line"><span class="token literal-property property">Accept</span><span class="token operator">:</span> application<span class="token operator">/</span>json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">GET</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer<span class="token operator">/</span><span class="token number">500</span></span>
<span class="line"><span class="token literal-property property">Accept</span><span class="token operator">:</span> application<span class="token operator">/</span>json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">DELETE</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer<span class="token operator">/</span><span class="token number">100</span></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line"><span class="token constant">DELETE</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>customer<span class="token operator">/</span><span class="token number">500</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><a href="https://ktor.io/docs/creating-http-apis.html" target="_blank" rel="noopener noreferrer">This page has detailed steps</a></p><h2 id="spring-framework" tabindex="-1"><a class="header-anchor" href="#spring-framework"><span>Spring framework</span></a></h2><p>Spring is a famous framework for developing server-side applications: APIs, server generated web pages, microservices, etc. It relies on the the Java ecosystem to build and run, thus making it compatible with Kotlin. Even better, Spring officially supports Kotlin. It even allows in start a new project with Kotlin and Gradle-Kotlin. In the next section, we&#39;ll use this starter to recreate our above REST API with Spring.</p><h3 id="🧪-spring-boot-part-1-develop-the-same-api-with-spring-boot" tabindex="-1"><a class="header-anchor" href="#🧪-spring-boot-part-1-develop-the-same-api-with-spring-boot"><span>🧪 Spring boot part 1 - develop the same API with Spring Boot</span></a></h3><ul><li>Create a project on <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">start.spring.io (also called Spring initializr)</a> with the following dependencies: Spring Web and Spring Boot DevTools.</li><li>Choose Kotlin as the language and Kotlin-Grade as the project manager.</li><li>Add these dependencies: <strong>Spring Web</strong>, <strong>Spring Boot DevTools</strong>, <strong>h2 database</strong> and <strong>Spring Data JPA</strong>.</li><li>Click on &quot;Generate&quot;. Download the archive, unzip it, and open the project with IntelliJ (preferably) or VSCode. <ul><li>For VSCode, install a <a href="https://marketplace.visualstudio.com/search?term=kotlin&amp;target=VSCode&amp;category=All%20categories&amp;sortBy=Relevance" target="_blank" rel="noopener noreferrer">Kotlin extension</a> and <a href="https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack" target="_blank" rel="noopener noreferrer">Spring Boot Extension Pack</a> ( ⚠️ Spring extension do not seem to support kotlin).</li></ul></li><li>Create <code>Customer</code> data class in the <code>model</code> package without the <code>@Serializable</code> annotation.</li><li>Create a <code>controller</code> package that contains a <code>CustomerController</code> class which provides a CRUD using a global list. You can find a skeleton below. <ul><li>💡 In Spring, Rest controllers serve the purpose of Ktor routes, where a controller defines a REST resource.</li></ul></li><li>Define the same endpoints as in the previous PW.</li><li>Start the REST API server by running <code>.\\gradlew bootRun</code> or from your IDE.</li><li>Please test the endpoints with a REST client. You can find http files here in <a href="https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.jetbrains.http" target="_blank" rel="noopener noreferrer">JetBrains format</a> or <a href="https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.vscode-resclient.http" target="_blank" rel="noopener noreferrer">VSCode&#39;s REST Client extension</a></li></ul><details class="hint-container details"><summary>CustomerController.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@RestController</span></span>
<span class="line"><span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> CustomerController <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> store</span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO: implement */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@PostMapping</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@RequestBody</span> customer<span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO: implement */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO: implement */</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">Models or model package ? plural or not ?</p><p>Both are ok as long as you follow the same convention in the project.</p></div><h3 id="🧪-spring-boot-part-2-adding-a-database" tabindex="-1"><a class="header-anchor" href="#🧪-spring-boot-part-2-adding-a-database"><span>🧪 Spring boot part 2 - adding a database</span></a></h3><p>Let&#39;s go a little bit further by storing data in a database and writing some tests.</p><p>We&#39;ll use the H2 in-memory database for the sake of simplicity, since it does not require a server to run. Classes will mapped to database tables with JPA annotations. The database API we&#39;ll be using is called <code>JPARepository</code>. It is a lightweight API that provides common CRUD features by just defining an interface.</p><p>On the testing side, we&#39;ll see two different syntaxes. The default one that is more familiar with Java style and the DSL one which is more readable and more familiar with Kotlin developers.</p><ul><li>Create a new Spring project using <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">Spring initializr</a> with Kotlin and the following dependencies: Spring Data JPA, H2 Database, Spring Boot DevTools, Spring Web</li><li>Open the project and add this class in the <code>model</code> package <code>@Entity class Product(@Id @GeneratedValue var id: Long? = null, var name: String, var price: Int)</code>. This single defines the class as well as the minimal JPA annotations (<code>@Entity</code>, <code>@Id</code> and <code>@GeneratedValue</code>) to generate the corresponding table.</li><li>In the <code>repository</code> package, declare the <code>ProductRepository</code> interface as follows <code>interface ProductRepository: JpaRepository&lt;Product, Long&gt;</code>. This is enough for Spring to generate an implementation with common features as we&#39;ll see later.</li><li>Next, create a <code>ProductService</code> class which will contain the business logic. In terms of architecture, the controller calls a service which in turn rely on other services or repositories.</li></ul><details class="hint-container details"><summary>ProductService.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">ProductService</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository<span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// use findByIdOrNull instad of findById because the latter returns an optional&lt;Product&gt; instead of Product?</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findByIdOrNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>In the controller package, create a <code>ProductController</code> class that is mapped to <code>/product</code> and injects the with <code>@Autowired</code>. Reply to <code>@Get</code> as follows.</li></ul><details class="hint-container details"><summary>ProductController.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@RestController</span></span>
<span class="line"><span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/product&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">ProductController</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productService<span class="token operator">:</span> ProductService<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span> <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">        productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">Kotlin makes getById(@PathVariable id: Long) more concise</p><p>The Elvis operator <code>?:</code> allows to simplify the code. Here is a longer version as reference.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> product <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> product</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to that, Spring provides <code>@ControllerAdvice</code> to change the exception message. You can see an <a href="https://spring.io/guides/tutorials/rest/" target="_blank" rel="noopener noreferrer">example here</a>.</p></div><ul><li>Let&#39;s run the project. Before running the project, we need to add a plugin that allows Kotlin classes to generate a default constructor <code>id(&quot;org.jetbrains.kotlin.plugin.jpa&quot;) version &quot;1.8.10&quot;</code>. The plugins should look as follows:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.jetbrains.kotlin.plugin.jpa&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line"> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.boot&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;3.0.4&quot;</span></span>
<span class="line"> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;io.spring.dependency-management&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.1.0&quot;</span></span>
<span class="line"> <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;jvm&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line"> <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;plugin.spring&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>As an exercise, implement these endpoints: POST a single product, DELETE by id (<code>/product/{id}</code>) and GET by id (<code>/product/{id}</code>). <ul><li>Hint: <code>ProductController</code> already provides the necessary methods.</li></ul></li><li>Call the different endpoints with a REST client.</li></ul><h3 id="🧪-spring-boot-part-2-adding-tests" tabindex="-1"><a class="header-anchor" href="#🧪-spring-boot-part-2-adding-tests"><span>🧪 Spring boot part 2 - adding tests</span></a></h3><p>Spring frameworks helps perform different types of tests by providing different classes out of the box:</p><ul><li>Unit testing of services, repositories and the REST API. This is done through mock utilities such as <code>MockMVC</code>.</li><li>Integration testing of the REST API using <code>TestRestTemplate</code>. In this situation, a full server is run and tested.</li></ul><p>Most, if not all classes provided by Spring provide an elegant syntax for Java developers. Some of them go further by taking advantage of Kotlin specific features. In the following, we&#39;re going to focus on parts that provide Kotlin DSLs, namely unit testing the REST API with <code>MockMVC</code>.</p><ul><li>Create a test class <code>ProductControllerUnitTests</code> with this initial content. <code>MockMvc</code> allows to unit test the REST API. The <code>@AutoConfigureMockMvc</code> annotation allows spring to configure it automatically</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@SpringBootTest</span></span>
<span class="line"><span class="token annotation builtin">@AutoConfigureMockMvc</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">ProductControllerTests</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> mockMvc<span class="token operator">:</span> MockMvc<span class="token punctuation">,</span></span>
<span class="line">    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository<span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@BeforeEach</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        productRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Add these two tests. The first one uses a classic approach while the second take advantage of Kotlin DSL capabilities. In addition to that, we name using a more readable string literal</li></ul>`,37)),e(i,null,{default:t(()=>[e(p,{title:"Without DSL (Test Get All)"},{default:t(()=>a[0]||(a[0]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt","data-title":"kt"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"testWithClassicApproach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    mockMvc"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"perform"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"status"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("isOk"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"content"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"containsString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"[]"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e(p,{title:"With DSL (Test Get Single)"},{default:t(()=>a[1]||(a[1]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt","data-title":"kt"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"`test GET a single product`"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    mockMvc"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product/1"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        status "),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"isOk"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.name"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"A"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.price"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        content "),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"contentType"),n("span",{class:"token punctuation"},"("),s("MediaType"),n("span",{class:"token punctuation"},"."),s("APPLICATION_JSON"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),a[3]||(a[3]=o(`<ul><li>As an exercise, unit tests for the other endpoints.</li></ul><div class="hint-container tip"><p class="hint-container-title">The request builder of JpaRepository</p><p>Spring repositories implement requests based on the name of their methods. For example, to get all products sorted by name, we can add this method to the interface.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">interface</span> ProductRepository<span class="token operator">:</span> JpaRepository<span class="token operator">&lt;</span>Product<span class="token punctuation">,</span> Long<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">findAllByOrderByNameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Product<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation" target="_blank" rel="noopener noreferrer">The official documentation</a> provides more detailed explanations and examples.</p></div><h2 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>node.js</span></a></h2><p>Thanks to Kotlin/JS, we can write apps that target node.js using Kotlin. We can even import npm libraries as long as you declare the JS API surface that you&#39;ll be using in Kotlin. This is called <strong>external declaration</strong> (You can think of it as an equivalent of TypeScript&#39;s type definitions) that declares the symbols that we want to access in Kotlin thanks to <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/" target="_blank" rel="noopener noreferrer">@JsModule</a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-non-module/" target="_blank" rel="noopener noreferrer">@JsNonModule</a> annotations.</p><p>Defining such external declarations can be a hassle and there seems to be no official automatic generator (<a href="https://github.com/Kotlin/dukat" target="_blank" rel="noopener noreferrer">dukat</a> has been removed in kotlin 1.8.20). In that case, we have two options, either we write the external declaration ourselves or import it as a dependency if available. Fortunately for express developers, <a href="https://github.com/chrisnkrueger/kotlin-express" target="_blank" rel="noopener noreferrer">chrisnkrueger/kotlin-express</a> provides declarations for the express library.</p><p>There are two gradle plugins that allow to create node.js projects: the <code>kotlin(&quot;js&quot;)</code> one and the <code>kotlin(&quot;multiplatform&quot;)</code> one. The difference between the two plugins is that the former only supports JS or WASM while the latter supports more platforms but requires to configure source sets. Thus, the former may seem easier to setup but the latter is better in the long run because it allows us to get more familiar with Kotlin Multiplatform (KMP).</p><h3 id="🧪-getting-started-with-kotlin-js-and-express" tabindex="-1"><a class="header-anchor" href="#🧪-getting-started-with-kotlin-js-and-express"><span>🧪 Getting started with Kotlin/JS and Express</span></a></h3><p>At the time of writing, I didn&#39;t find an official wizard or starter project. So we&#39;ll create one from scratch using <code>gradle init</code>.</p><ul><li>Create a new Gradle project using IntelliJ or by running <code>gradle init</code> in a empty folder (see below for the replies to the <code>gradle init</code> command).</li></ul><details class="hint-container details"><summary>gradle init</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">gradle init</span>
<span class="line">Starting a Gradle Daemon, <span class="token number">1</span> incompatible and <span class="token number">1</span> stopped Daemons could not be reused, use <span class="token parameter variable">--status</span> <span class="token keyword">for</span> details</span>
<span class="line"></span>
<span class="line">Select <span class="token builtin class-name">type</span> of project to generate:</span>
<span class="line">  <span class="token number">1</span>: basic</span>
<span class="line">  <span class="token number">2</span>: application</span>
<span class="line">  <span class="token number">3</span>: library</span>
<span class="line">  <span class="token number">4</span>: Gradle plugin</span>
<span class="line">Enter selection <span class="token punctuation">(</span>default: basic<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">Select build script DSL:</span>
<span class="line">  <span class="token number">1</span>: Kotlin</span>
<span class="line">  <span class="token number">2</span>: Groovy</span>
<span class="line">Enter selection <span class="token punctuation">(</span>default: Kotlin<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">Project name <span class="token punctuation">(</span>default: starter<span class="token punctuation">)</span>: rest-api-kotlin-nodejs</span>
<span class="line"></span>
<span class="line">Generate build using new APIs and behavior <span class="token punctuation">(</span>some features may change <span class="token keyword">in</span> the next minor release<span class="token punctuation">)</span>? <span class="token punctuation">(</span>default: no<span class="token punctuation">)</span> <span class="token punctuation">[</span>yes, no<span class="token punctuation">]</span> <span class="token function">yes</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> Task :init</span>
<span class="line">To learn <span class="token function">more</span> about Gradle by exploring our Samples at https://docs.gradle.org/8.3/samples</span>
<span class="line"></span>
<span class="line">BUILD SUCCESSFUL <span class="token keyword">in</span> 24s</span>
<span class="line"><span class="token number">2</span> actionable tasks: <span class="token number">2</span> executed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>In <strong>build.gradle.kts</strong>, add and configure the <code>kotlin(&quot;multiplatform&quot;)</code> plugin. Also add the <code>express</code> and <code>dev.chriskrueger:kotlin-express</code> dependencies.</li></ul><details class="hint-container details"><summary>build.gradle.kts</summary><div class="language-kts line-numbers-mode" data-highlighter="prismjs" data-ext="kts" data-title="kts"><pre><code><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;multiplatform&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.9.20-Beta&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">repositories <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;tech.worldline.demo&quot;</span></span></span>
<span class="line">version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0-SNAPSHOT&quot;</span></span></span>
<span class="line"></span>
<span class="line">kotlin <span class="token punctuation">{</span></span>
<span class="line">    js <span class="token punctuation">{</span></span>
<span class="line">        nodejs <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        binaries<span class="token punctuation">.</span><span class="token function">executable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">useCommonJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    sourceSets <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> jsMain <span class="token keyword">by</span> getting <span class="token punctuation">{</span></span>
<span class="line">            dependencies <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">npm</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;express&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&gt; 4.0.0 &lt; 5.0.0&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;dev.chriskrueger:kotlin-express:1.2.0&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">Some notes on the build file</p><ul><li>express dependency is retrieved from npm</li><li><code>useCommonJs()</code> <a href="https://github.com/Kotlin/dukat/issues/106" target="_blank" rel="noopener noreferrer">is required</a> to be able to use <a href="https://github.com/chrisnkrueger/kotlin-express" target="_blank" rel="noopener noreferrer">chrisnkrueger/kotlin-express</a> in our code.</li></ul></div><ul><li>create a <strong>main.kt</strong> file in <strong>src/jsMain/kotlin</strong> with the following content:</li></ul><details class="hint-container details"><summary>main.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> messages <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;I love Kotlin/JS&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> app <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// REST API that provides a **GET /hello** endpoint</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create a server that listens to port 3000</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;server start at port 3000&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>Run the task <code>jsRun</code> from IntelliJ of from the command line <code>./gradlew --console=plain jsRun</code>. The server should start running.</li><li>Open the <strong>hello</strong> endpoint on <a href="http://localhost:3000/hello" target="_blank" rel="noopener noreferrer">http://localhost:3000/hello</a></li></ul><div class="hint-container warning"><p class="hint-container-title">Execution failed for task &#39;:kotlinStoreYarnLock&#39;</p><p>If you get this error:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">Execution failed <span class="token keyword">for</span> task <span class="token string">&#39;:kotlinStoreYarnLock&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line"><span class="token operator">&gt;</span> yarn.lock was changed. Run the <span class="token variable"><span class="token variable">\`</span>kotlinUpgradeYarnLock<span class="token variable">\`</span></span> task to actualize yarn.lock <span class="token function">file</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Run <code>./gradlew kotlinUpgradeYarnLock</code> so that yarn.lock is updated</p></div><h3 id="🧪-adding-a-post-endpoint-and-an-external-kotlin-js-definition" tabindex="-1"><a class="header-anchor" href="#🧪-adding-a-post-endpoint-and-an-external-kotlin-js-definition"><span>🧪 Adding a post endpoint and an external Kotlin/JS definition</span></a></h3><p>Let&#39;s add a post endpoint which reads the body as a json. In order to read the body as json, we must add this possibility to express by importing the npm library <a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener noreferrer">body-parser</a> and by calling <code>app.use(bodyParser.json())</code>. Once this setup is complete, <code>req.body</code> will contain the content of the body. However, there is no available external definition for <strong>bodyParser</strong> as of the time of writing. Thus, we must create or own external definition.</p><ul><li>First, add the body-parser dependncy in the build file <code>implementation(npm(&quot;body-parser&quot;, &quot;&gt; 1.0.0 &lt; 2.0.0&quot;))</code></li><li>Next, we would write: <code>app.use(bodyparser.json())</code> to activate the library. Let&#39;s guess what a minimal definition of <code>bodyparser</code> can be.</li></ul><details class="hint-container details"><summary>BodyParser.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token comment">// external means that this class is defined in JS</span></span>
<span class="line"><span class="token keyword">external</span> <span class="token keyword">class</span> BodyParser <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// we tell Kotlin that we want to use the json() function.</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any</span>
<span class="line">    <span class="token comment">// It is not required to define all the functions of the module</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @JsModule is used to import the module from the NPM registry</span></span>
<span class="line"><span class="token annotation builtin">@JsModule</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;body-parser&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">external</span> <span class="token keyword">val</span> bodyParser<span class="token operator">:</span> BodyParser</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>Finally, we just need to add the BodyParser.kt file into the project and use it in our server.</li></ul><details class="hint-container details"><summary>main.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span></span>
<span class="line">    <span class="token comment">// Kotlin does not keep the original field name when parsing JSON from JS (you can see it the in get response)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body <span class="token keyword">as</span><span class="token operator">?</span> Message <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;failed to get the body from Kotlin&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Thus, we need to use js() to get the the field by its expected name</span></span>
<span class="line">    <span class="token comment">// js() calls JS from Kotlin</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;req.body from JS </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">js</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;req.body.id&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">js</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;req.body.message&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> id <span class="token operator">=</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;req.body.id&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> Int</span>
<span class="line">    <span class="token keyword">val</span> message <span class="token operator">=</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;req.body.message&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> String</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Message</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">js</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{cause : &#39;error&#39;}&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> Any<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="🧪-adding-more-endpoints" tabindex="-1"><a class="header-anchor" href="#🧪-adding-more-endpoints"><span>🧪 Adding more endpoints</span></a></h3><ul><li>Add PUT and DELETE endpoints</li></ul><h2 id="🎯-solutions" tabindex="-1"><a class="header-anchor" href="#🎯-solutions"><span>🎯 Solutions</span></a></h2><ul><li><a href="https://github.com/worldline/learning-kotlin/tree/master/material/ktor-api" target="_blank" rel="noopener noreferrer">ktor Rest API</a></li><li><a href="https://github.com/worldline/learning-kotlin/tree/master/material/spring-boot-kt-api" target="_blank" rel="noopener noreferrer">Spring boot Rest API</a></li><li>The starter and final node.js projects are available <a href="https://github.com/worldline/learning-kotlin/blob/main/material/rest-api-kotlin-node.js" target="_blank" rel="noopener noreferrer">here</a></li></ul><h2 id="other-frameworks" tabindex="-1"><a class="header-anchor" href="#other-frameworks"><span>Other frameworks</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Micronaut and Quarkus</p><p>Micronaut and Quarkus are two other frameworks that support Kotlin. Bootstrap websites are available <a href="https://micronaut.io/launch" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://code.quarkus.io/?b=GRADLE&amp;e=kotlin" target="_blank" rel="noopener noreferrer">here</a>.</p></div><h2 id="📖-further-readings" tabindex="-1"><a class="header-anchor" href="#📖-further-readings"><span>📖 Further readings</span></a></h2><p>These official tutorials go even further:</p><ul><li><a href="https://kotlinlang.org/docs/jvm-spring-boot-restful.html" target="_blank" rel="noopener noreferrer">This tutorial from kotlinlang</a> shows how to create a RESTful web service with a database using Spring Boot.</li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener noreferrer">This one from spring.io</a> show how to build a web application with Spring Boot and Kotlin.</li><li><a href="https://spring.io/guides/tutorials/rest/" target="_blank" rel="noopener noreferrer">Rest ÄPIs with Spring</a></li><li><a href="https://quarkus.io/guides/kotlin" target="_blank" rel="noopener noreferrer">Quarkus and kotlin</a></li></ul><p><strong>References</strong></p><ul><li><a href="https://dev.to/mpetuska/js-in-kotlinjs-c4g" target="_blank" rel="noopener noreferrer">JS in Kotlin/JS</a></li><li><a href="https://www.baeldung.com/kotlin/mockmvc-kotlin-dsl" target="_blank" rel="noopener noreferrer">mockmvc kotlin dsl</a></li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener noreferrer">spring-boot-kotlin tutorial</a></li><li><a href="https://www.baeldung.com/kotlin/jpa" target="_blank" rel="noopener noreferrer">Working with Kotlin and JPA</a></li><li><a href="https://stackoverflow.com/questions/47143127/spring-data-jpa-how-to-use-kotlin-nulls-instead-of-optional" target="_blank" rel="noopener noreferrer">Spring Data JPA How to use Kotlin nulls instead of Optional</a></li></ul>`,34))])}const g=c(d,[["render",k],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/en/backend-development/","title":"📚 Backend development","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Ktor","slug":"ktor","link":"#ktor","children":[{"level":3,"title":"🧪 develop an API with Ktor","slug":"🧪-develop-an-api-with-ktor","link":"#🧪-develop-an-api-with-ktor","children":[]}]},{"level":2,"title":"Spring framework","slug":"spring-framework","link":"#spring-framework","children":[{"level":3,"title":"🧪 Spring boot part 1 - develop the same API with Spring Boot","slug":"🧪-spring-boot-part-1-develop-the-same-api-with-spring-boot","link":"#🧪-spring-boot-part-1-develop-the-same-api-with-spring-boot","children":[]},{"level":3,"title":"🧪 Spring boot part 2 - adding a database","slug":"🧪-spring-boot-part-2-adding-a-database","link":"#🧪-spring-boot-part-2-adding-a-database","children":[]},{"level":3,"title":"🧪 Spring boot part 2 - adding tests","slug":"🧪-spring-boot-part-2-adding-tests","link":"#🧪-spring-boot-part-2-adding-tests","children":[]}]},{"level":2,"title":"node.js","slug":"node-js","link":"#node-js","children":[{"level":3,"title":"🧪 Getting started with Kotlin/JS and Express","slug":"🧪-getting-started-with-kotlin-js-and-express","link":"#🧪-getting-started-with-kotlin-js-and-express","children":[]},{"level":3,"title":"🧪 Adding a post endpoint and an external Kotlin/JS definition","slug":"🧪-adding-a-post-endpoint-and-an-external-kotlin-js-definition","link":"#🧪-adding-a-post-endpoint-and-an-external-kotlin-js-definition","children":[]},{"level":3,"title":"🧪 Adding more endpoints","slug":"🧪-adding-more-endpoints","link":"#🧪-adding-more-endpoints","children":[]}]},{"level":2,"title":"🎯 Solutions","slug":"🎯-solutions","link":"#🎯-solutions","children":[]},{"level":2,"title":"Other frameworks","slug":"other-frameworks","link":"#other-frameworks","children":[]},{"level":2,"title":"📖 Further readings","slug":"📖-further-readings","link":"#📖-further-readings","children":[]}],"git":{"updatedTime":1742570977000,"contributors":[{"name":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":1}]},"filePathRelative":"en/backend-development/README.md"}');export{g as comp,b as data};
