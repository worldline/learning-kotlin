import{_ as c,c as r,a as l,b as e,d as t,r as o,o as u,e as n,f as s}from"./app-D-YqA8eI.js";const d={};function k(m,a){const i=o("CodeGroupItem"),p=o("CodeGroup");return u(),r("div",null,[a[2]||(a[2]=l(`<h1 id="üìö-developpement-du-backend" tabindex="-1"><a class="header-anchor" href="#üìö-developpement-du-backend"><span>üìö D√©veloppement du backend</span></a></h1><p>De nombreux frameworks supportent officiellement Kotlin comme <a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="noopener noreferrer">Spring</a>, <a href="https://quarkus.io/guides/kotlin" target="_blank" rel="noopener noreferrer">Quarkus</a> et <a href="https://github.com/ktorio/ktor" target="_blank" rel="noopener noreferrer">Ktor</a>, parmi d&#39;autres <a href="https://kotlinlang.org/docs/server-overview.html#deploying-kotlin-server-side-applications" target="_blank" rel="noopener noreferrer">list√©s ici</a>.</p><p>En outre, Kotlin est th√©oriquement compatible avec tout framework qui cible la JVM ou JS. Cependant, les frameworks qui ne supportent pas officiellement Kotlin peuvent n√©cessiter quelques ajustements pour l&#39;utiliser.</p><h2 id="ktor" tabindex="-1"><a class="header-anchor" href="#ktor"><span>Ktor</span></a></h2><p>Ktor est une biblioth√®que Kotlin multiplateforme permettant de d√©velopper des clients et des serveurs HTTP. Cela fait de Ktor une biblioth√®que utile √† la fois aux d√©veloppeurs frontend, pour la partie client HTTP, ainsi qu&#39;aux d√©veloppeurs backend, pour la partie serveur HTTP. Dans ce qui suit, nous allons cr√©er une API REST avec le serveur Ktor.</p><h3 id="tp-developper-une-api-avec-ktor" tabindex="-1"><a class="header-anchor" href="#tp-developper-une-api-avec-ktor"><span>TP : d√©velopper une API avec Ktor</span></a></h3><ul><li>Cr√©ez un projet sur <a href="https://start.ktor.io/" target="_blank" rel="noopener noreferrer">start.ktor.io</a> avec les plugins suivants : Content Negotiation, kotlinx.serialization, et Routing.</li><li>Cliquez sur &quot;Generate project&quot;.</li><li>T√©l√©chargez l&#39;archive, d√©compressez-la et ouvrez le projet avec votre IDE pr√©f√©r√©.</li><li>Cr√©ez un package <code>models</code> et ajoutez-y une classe de donn√©es <code>Customer</code> avec ces propri√©t√©s immuables <code>id : String, firstName : String, lastName : Cha√Æne, email : Cha√Æne</code>.</li><li>Annotez la classe avec <code>@Serializable</code>.</li><li>Cr√©ez un nouveau package nomm√© <code>routes</code> et ajoutez-y un fichier <code>CustomerRoutes.kt</code> qui contiendra le code pour l&#39;endpoint <code>/customer</code>.</li><li>Le code ci-dessous fournit l&#39;impl√©mentation de certains endpoints. Veuillez impl√©menter les autres.</li><li>Pour activer la route, appelez <code>customerRouting()</code> dans le fichier de configuration du routage situ√© dans <code>plugins/Routing.kt</code>.</li><li>Pour plus de simplicit√©, utilisez une liste globale de clients en m√©moire <code>val store = mutableListOf&lt;Customer&gt;()</code>.</li><li>Lancer le serveur en ex√©cutant la m√©thode main.</li><li>Tester l&#39;API sur l&#39;IDE en utilisant un fichier http ou en utilisant n&#39;importe quel autre client.</li></ul><details class="hint-container details"><summary>CustomerRoutes.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> Route<span class="token punctuation">.</span><span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">route</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token punctuation">{</span></span>
<span class="line">      call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">val</span> id <span class="token operator">=</span> call<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string-literal singleline"><span class="token string">&quot;Missing id&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>BadRequest</span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> customer <span class="token operator">=</span></span>
<span class="line">        store<span class="token punctuation">.</span><span class="token function">find</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>id <span class="token operator">==</span> id <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">return</span>@<span class="token keyword">get</span> call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token string-literal singleline"><span class="token string">&quot;Pas de client avec l&#39;id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">id</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">          status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>NotFound</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">      call<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    post <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">val</span> customer <span class="token operator">=</span> call<span class="token punctuation">.</span>receive<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span></span>
<span class="line">      call<span class="token punctuation">.</span><span class="token function">respondText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Customer stored correctly&quot;</span></span><span class="token punctuation">,</span> status <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>Created<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id?}&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// TODO</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>plugins/Routing.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">fun</span> Application<span class="token punctuation">.</span><span class="token function">configureRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    routing <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">customerRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">return@label</p><p>Vous pouvez sp√©cifier le niveau que vous voulez retourner avec un label explicite en utilisant <code>return@lambda</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line">lambdaA <span class="token punctuation">{</span></span>
<span class="line">    lambdaB <span class="token punctuation">{</span></span>
<span class="line">        lambdaC <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> randomInt <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>randomInt <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaC</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token label symbol">@lambdaB</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;In lambdaB&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiaW1wb3J0IGtvdGxpbi5yYW5kb20uUmFuZG9tXG5cbi8vIHJldHVybiB3aXRoIGltcGxpY2l0IGxhYmVsc1xuXG5mdW4gbWFpbigpIHtcbiAgIHZhbCBrb3RsaW4gPSBcIvCfmYJcIlxuICAga290bGluLmxldCB7XG4gICAgICAgaXQuYXBwbHkge1xuXHRcdFx0dmFsIHJhbmRvbUludCA9IFJhbmRvbS5uZXh0SW50KDAsIDEwMClcbiAgICAgICAgICAgIHByaW50bG4ocmFuZG9tSW50KVxuICAgICAgICAgICAgaWYgKHJhbmRvbUludCA+IDUwKSByZXR1cm5AYXBwHkgZWxzZSByZXR1cm5AbGV0XG4gICAgICAgfVxuICAgICAgIHByaW50bG4oXCJpbnQgbV0IGFmdGVyIGFwcGx5XCIpXG4gICB9XG59In0=" target="_blank" rel="noopener noreferrer">Ce code ex√©cute un autre exemple</a>.</p></div><details class="hint-container details"><summary>CustomerTest.http</summary><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">POST http://127.0.0.1:8080/customer</span>
<span class="line">Content-Type : application/json</span>
<span class="line"></span>
<span class="line">{</span>
<span class="line">  &quot;id&quot; : &quot;100&quot;,</span>
<span class="line">  &quot;firstName&quot; : &quot;Jane&quot;,</span>
<span class="line">  &quot;lastName&quot; : &quot;Smith&quot;,</span>
<span class="line">  &quot;email&quot; : &quot;jane.smith@company.com&quot;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">POST http://127.0.0.1:8080/customer</span>
<span class="line">Content-Type : application/json</span>
<span class="line"></span>
<span class="line">{</span>
<span class="line">  &quot;id&quot; : &quot;200&quot;,</span>
<span class="line">  &quot;firstName&quot; : &quot;John&quot;,</span>
<span class="line">  &quot;lastName&quot; : &quot;Smith&quot;,</span>
<span class="line">  &quot;email&quot; : &quot;john.smith@company.com&quot;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">POST http://127.0.0.1:8080/customer</span>
<span class="line">Content-Type : application/json</span>
<span class="line"></span>
<span class="line">{</span>
<span class="line">  &quot;id&quot; : &quot;300&quot;,</span>
<span class="line">  &quot;firstName&quot; : &quot;Mary&quot;,</span>
<span class="line">  &quot;lastName&quot; : &quot;Smith&quot;,</span>
<span class="line">  &quot;email&quot; : &quot;mary.smith@company.com&quot;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">GET http://127.0.0.1:8080/customer</span>
<span class="line">Accept : application/json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">GET http://127.0.0.1:8080/customer/200</span>
<span class="line">Accepte : application/json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">GET http://127.0.0.1:8080/customer/500</span>
<span class="line">Accepte : application/json</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">DELETE http://127.0.0.1:8080/customer/100</span>
<span class="line"></span>
<span class="line">###</span>
<span class="line">DELETE http://127.0.0.1:8080/customer/500</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><a href="https://ktor.io/docs/creating-http-apis.html" target="_blank" rel="noopener noreferrer">Cette page contient des √©tapes d√©taill√©es</a></p><h2 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>node.js</span></a></h2><p>Gr√¢ce √† Kotlin/JS, nous pouvons √©crire des applications qui ciblent node.js en utilisant Kotlin.</p><p>On peut m√™me importer des librairies npm √† condition de d√©clarer les API JS que l&#39;on va utiliser en Kotlin. C&#39;est ce qu&#39;on appelle une <strong>d√©claration externe</strong> (vous pouvez la consid√©rer comme un √©quivalent des d√©finitions de type de TypeScript) qui d√©clare les symboles auxquels nous voulons acc√©der en Kotlin gr√¢ce aux annotations <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/" target="_blank" rel="noopener noreferrer">@JsModule</a> et <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-non-module/" target="_blank" rel="noopener noreferrer">@JsNonModule</a>. D√©finir de telles d√©clarations externes peut s&#39;av√©rer fastidieux et il ne semble pas y avoir de g√©n√©rateur automatique officiel et stable (<a href="https://github.com/Kotlin/dukat" target="_blank" rel="noopener noreferrer">dukat</a> a √©t√© supprim√© dans kotlin 1.8.20). Dans ce cas, nous avons deux options, soit √©crire la d√©claration externe nous-m√™me, soit l&#39;importer en tant que d√©pendance si elle est disponible.</p><p>Heureusement pour nous, le prochain TP utilise la librairie Express pour laquelle nous pouvons trouver une d√©claration de type externe.</p><h3 id="tp-api-rest-avec-kotlin-js-et-express" tabindex="-1"><a class="header-anchor" href="#tp-api-rest-avec-kotlin-js-et-express"><span>TP : API Rest avec Kotlin/JS et Express</span></a></h3><ul><li>Dans IntelliJ, cr√©er un nouveau projet node.js</li><li>Une fois le projet charg√©, √©diter <strong>build.gradle.ts</strong> comme suit : <ul><li>Mettre la derni√®re version de Kotlin dans la ligne contenant <code>kotlin(&quot;js&quot;)</code>.</li><li>Ajoutez ces deux d√©pendances: <ul><li>La premi√®re est la biblioth√®que <a href="https://expressjs.com/" target="_blank" rel="noopener noreferrer"><strong>Express</strong></a>,</li><li>et la seconde est la d√©finition externe fournie par <a href="https://github.com/chrisnkrueger/kotlin-express" target="_blank" rel="noopener noreferrer">chrisnkrueger/kotlin-express</a>.</li></ul></li><li>ajouter une ligne <code>useCommonJs()</code> √† l&#39;int√©rieur du bloc <code>js</code>. Ceci <a href="https://github.com/Kotlin/dukat/issues/106" target="_blank" rel="noopener noreferrer">est n√©cessaire</a> pour pouvoir utiliser <a href="https://github.com/chrisnkrueger/kotlin-express" target="_blank" rel="noopener noreferrer">chrisnkrueger/ kotlin-express</a> dans notre code.</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">npm</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt; 4.0.0 &lt; 5.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&quot;dev.chriskrueger:kotlin-express:1.2.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Modifiez <strong>main.kt</strong> comme suit. Cela cr√©e un serveur API REST qui √©coute le port 3000 et fournit une route <strong>GET /hello</strong>.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">val</span> id <span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message <span class="token operator">:</span> String<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> messages <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;I love Kotlin/JS&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> app <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> req<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;server start at port 3000&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Ex√©cutez la t√¢che <code>nodeRun</code> depuis votre IDE ou depuis la ligne de commande (si vous avez install√© Gradle). <ul><li>Si vous rencontrez une erreur avec Yarn lock, ex√©cutez la t√¢che <code>kotlinUpgradeYarnLock</code> puis r√©essayez.</li></ul></li><li>Ajouter des routes en POST, PUT et DELETE</li><li>En ce qui concerne le corps du POST, Express positionne <code>req.body</code> √† <code>undefined</code> √† moins que nous ne sp√©cifions un <strong>body parser</strong>. <ul><li>Pour un corps en JSON, nous devons appeler <code>app.use(bodyParser.json())</code>.</li><li><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener noreferrer"><strong>bodyParser</strong></a> est une biblioth√®que npm et malheureusement, <a href="https://github.com/chrisnkrueger/kotlin-express" target="_blank" rel="noopener noreferrer">chrisnkrueger/kotlin-express</a> ne fournit pas de d√©finition externe pour <strong>bodyParser</strong> au moment de l&#39;√©criture de ces lignes (chrisnkrueger/kotlin-express en version 1.2.0).</li><li>Pouvez-vous essayer de la d√©finir vous-m√™me en lisant le <a href="https://www.npmjs.com/package/body-parser?activeTab=code" target="_blank" rel="noopener noreferrer">code de la biblioth√®que</a> ?</li><li>Vous pouvez trouver une solution <a href="https://github.com/worldline/learning-kotlin/blob/main/material/kotlin-nodejs-demo/src/main/kotlin/BodyParser.kt" target="_blank" rel="noopener noreferrer">ici</a></li></ul></li></ul><h2 id="spring-framework" tabindex="-1"><a class="header-anchor" href="#spring-framework"><span>Spring framework</span></a></h2><p>Spring est un framework c√©l√®bre pour le d√©veloppement d&#39;applications c√¥t√© serveur : API REST, pages web g√©n√©r√©es par le serveur, microservices, etc. Il s&#39;appuie sur l&#39;√©cosyst√®me Java pour la compilation et l&#39;ex√©cution, ce qui le rend compatible avec Kotlin. Mieux encore, Spring supporte officiellement Kotlin. On peut m√™me d√©marrer un nouveau projet avec Kotlin et Gradle-Kotlin. Dans la prochaine section, nous utiliserons ce projet pour recr√©er notre API REST plus haut avec Spring.</p><h3 id="tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot" tabindex="-1"><a class="header-anchor" href="#tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot"><span>TP : Spring boot part 1 - d√©velopper la m√™me API avec Spring Boot</span></a></h3><ul><li>Cr√©ez un projet sur <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">start.spring.io (aussi appel√© Spring initializr)</a> avec les d√©pendances suivantes : Spring Web et Spring Boot DevTools.</li><li>Choisissez Kotlin comme langage et Kotlin-Grade comme gestionnaire de projet.</li><li>Ajoutez les d√©pendances suivantes : <strong>Spring Web</strong> et <strong>Spring Boot DevTools</strong>.</li><li>Cliquez sur <strong>Generate</strong>. T√©l√©chargez l&#39;archive, d√©compressez-la et ouvrez le projet avec IntelliJ (de pr√©f√©rence) ou VSCode. <ul><li>Pour VSCode, installez une <a href="https://marketplace.visualstudio.com/search?term=kotlin&amp;target=VSCode&amp;category=All%20categories&amp;sortBy=Relevance" target="_blank" rel="noopener noreferrer">extension Kotlin</a> et <a href="https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack" target="_blank" rel="noopener noreferrer">Spring Boot Extension Pack</a> ( ‚ö†Ô∏è l&#39;extension Spring ne semble pas supporter kotlin).</li></ul></li><li>V√©rifiez que la partie plugins <code>build.gradle.kts</code> utilise la derni√®re version de Kotlin. Voici √† quoi cela devrait ressembler avec Kotlin <em>1.8.10</em> :</li></ul><div class="language-kts line-numbers-mode" data-highlighter="prismjs" data-ext="kts" data-title="kts"><pre><code><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.springframework.boot&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;3.0.4&quot;</span></span></span>
<span class="line">  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.spring.dependency-management&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.1.0&quot;</span></span></span>
<span class="line">  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jvm&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.8.10&quot;</span></span></span>
<span class="line">  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;plugin.spring&quot;</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">&quot;1.8.10&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Cr√©ez la <code>data class Customer</code> dans le package <code>model</code> (sans l&#39;annotation <code>@Serializable</code>).</li><li>Cr√©ez un paquetage <code>controller</code> qui contient une classe <code>CustomerController</code> qui fournit un CRUD en utilisant une liste globale. <ul><li>Vous pouvez trouver un squelette ci-dessous.</li><li>üí° Dans Spring, les contr√¥leurs Rest servent de routes Ktor, o√π un contr√¥leur d√©finit une ressource REST.</li></ul></li><li>D√©finissez les m√™mes routes que dans le TP pr√©c√©dent.</li><li>D√©marrez le serveur de l&#39;API REST en ex√©cutant : <ul><li>Sur Powershell : <code>.\\gradlew.bat bootRun</code></li><li>Tout shell Unix : <code>.\\gradlew bootRun</code></li><li>Ou bien, v√©rifiez si votre IDE fournit d√©j√† des configurations d&#39;ex√©cution pour les projets Spring Boot.</li></ul></li><li>Veuillez tester les routes avec un client REST. Vous pouvez trouver des fichiers <strong>http</strong> ici au <a href="https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.jetbrains.http" target="_blank" rel="noopener noreferrer">format JetBrains</a> ou <a href="https://github.com/worldline/learning-kotlin/blob/main/material/spring-boot-kt-api/customer.vscode-resclient.http" target="_blank" rel="noopener noreferrer">au format de l&#39;extension REST Client de VSCode</a></li></ul><details class="hint-container details"><summary>CustomerController.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">val</span> store <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@RestController</span></span>
<span class="line"><span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/customer&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> CustomerController <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> store</span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@PostMapping</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@RequestBody</span> customer <span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* TODO : implement */</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="tp-spring-boot-partie-2-ajouter-une-base-de-donnees" tabindex="-1"><a class="header-anchor" href="#tp-spring-boot-partie-2-ajouter-une-base-de-donnees"><span>TP : Spring boot partie 2 - ajouter une base de donn√©es</span></a></h3><p>Allons un peu plus loin en stockant des donn√©es dans une base de donn√©es et en √©crivant quelques tests.</p><p>Nous utiliserons la base de donn√©es en m√©moire H2 pour des raisons de simplicit√©, puisqu&#39;elle ne n√©cessite pas de serveur pour fonctionner. Les classes seront mapp√©es aux tables de la base de donn√©es avec des annotations JPA. L&#39;API de base de donn√©es que nous utiliserons s&#39;appelle <code>JPARepository</code>. C&#39;est une API l√©g√®re qui fournit des fonctionnalit√©s CRUD communes √† partir d&#39;une simple une interface.</p><ul><li>Cr√©ez un nouveau projet Spring en utilisant <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">Spring initializr</a> avec Kotlin et les d√©pendances suivantes : Spring Data JPA, H2 Database, Spring Boot DevTools, Spring Web.</li><li>Ouvrez le projet et ajoutez cette classe dans le package <code>model</code> <code>@Entity class Product(@Id @GeneratedValue var id : Long ? = null, var name : String, var price : Int)</code>. Ceci d√©finit la classe ainsi que les annotations JPA minimales (<code>@Entity</code>, <code>@Id</code> et <code>@GeneratedValue</code>) pour g√©n√©rer la table correspondante.</li><li>Dans le package <code>repository</code>, d√©clarez l&#39;interface <code>ProductRepository</code> comme suit <code>interface ProductRepository : JpaRepository&lt;Produit, Long&gt;</code>. C&#39;est suffisant pour que Spring g√©n√®re une impl√©mentation avec des caract√©ristiques communes comme nous le verrons plus tard.</li><li>Ensuite, cr√©ez une classe <code>ProductService</code> qui contiendra la logique m√©tier. En termes d&#39;architecture, le contr√¥leur appelle un service qui, √† son tour, s&#39;appuie sur d&#39;autres services ou r√©f√©rentiels.</li></ul><details class="hint-container details"><summary>ProductService.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">ProductService</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository<span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// use findByIdOrNull instad of findById because the latter returns an optional&lt;Product&gt; instead of Product?</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">findByIdOrNull</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li>Dans le package controller, cr√©ez une classe <code>ProductController</code> qui est mapp√©e √† <code>/product</code> et inject√©e avec <code>@Autowired</code>. R√©pondez √† <code>@Get</code> comme suit.</li></ul><details class="hint-container details"><summary>ProductController.kt</summary><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@RestController</span></span>
<span class="line"><span class="token annotation builtin">@RequestMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/product&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">ProductController</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productService <span class="token operator">:</span> ProductService<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span> <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">        productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">Kotlin rend getById(@PathVariable id : Long) plus concis</p><p>L&#39;op√©rateur Elvis <code>?:</code> permet de simplifier le code. Voici une version plus longue en guise de r√©f√©rence.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{id}&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation builtin">@PathVariable</span> id <span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">:</span> Produit <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> product <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> product</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">ResponseStatusException</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En outre, Spring fournit <code>@ControllerAdvice</code> pour modifier le message d&#39;exception. Vous pouvez voir un [exemple ici] (<a href="https://spring.io/guides/tutorials/rest/" target="_blank" rel="noopener noreferrer">https://spring.io/guides/tutorials/rest/</a>).</p></div><ul><li>Ex√©cutons le projet. Avant de lancer le projet, nous devons ajouter un plugin qui permet aux classes Kotlin de g√©n√©rer un constructeur par d√©faut <code>id(&quot;org.jetbrains.kotlin.plugin.jpa&quot;) version &quot;1.8.10&quot;</code>. Les plugins devraient ressembler √† ce qui suit :</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.jetbrains.kotlin.plugin.jpa&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line">  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.boot&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;3.0.4&quot;</span></span>
<span class="line">  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;io.spring.dependency-management&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.1.0&quot;</span></span>
<span class="line">  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;jvm&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line">  <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">&quot;plugin.spring&quot;</span><span class="token punctuation">)</span> version <span class="token string">&quot;1.8.10&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>En guise d&#39;exercice, impl√©mentez ces routes : POST d&#39;un seul produit, DELETE par id (<code>/produit/{id}</code>) et GET par id (<code>/produit/{id}</code>). <ul><li>Indice : <code>ProductController</code> fournit d√©j√† les m√©thodes n√©cessaires.</li></ul></li><li>Appelez les diff√©rents points de terminaison avec un client REST.</li><li>Tester votre API Rest avec un client HTTP</li></ul><h3 id="tp-spring-boot-partie-3-ajouter-des-tests" tabindex="-1"><a class="header-anchor" href="#tp-spring-boot-partie-3-ajouter-des-tests"><span>TP : Spring boot partie 3 - ajouter des tests</span></a></h3><p>Les frameworks Spring permettent d&#39;effectuer diff√©rents types de tests en fournissant diff√©rentes classes d√®s le d√©part :</p><ul><li>Tests unitaires/de composants des services et de l&#39;API REST. Cela se fait par le biais d&#39;utilitaires de bouchonnage tels que <code>MockMVC</code>.</li><li>Tests d&#39;int√©gration de l&#39;API REST en utilisant <code>TestRestTemplate</code>. Dans ce cas, un serveur complet est ex√©cut√© et test√©.</li></ul><p>La plupart des classes fournies par Spring, si ce n&#39;est toutes, offrent une syntaxe √©l√©gante pour les d√©veloppeurs Java. Certaines d&#39;entre elles vont plus loin en tirant parti des caract√©ristiques sp√©cifiques de Kotlin. Dans ce qui suit, nous allons nous concentrer sur les parties qui fournissent des DSLs Kotlin, √† savoir le test unitaire de l&#39;API REST avec <code>MockMVC</code>.</p><ul><li>Cr√©er une classe de test <code>ProductControllerUnitTests</code> avec le contenu initial ci-dessous. <code>MockMvc</code> permet de tester unitairement l&#39;API REST. L&#39;annotation <code>@AutoConfigureMockMvc</code> permet √† Spring de la configurer automatiquement.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@SpringBootTest</span></span>
<span class="line"><span class="token annotation builtin">@AutoConfigureMockMvc</span></span>
<span class="line">classe <span class="token function">ProductControllerTests</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> mockMvc <span class="token operator">:</span> MockMvc<span class="token punctuation">,</span></span>
<span class="line">    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">val</span> productRepository <span class="token operator">:</span> ProductRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@BeforeEach</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        productRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Ajoutez les deux tests ci-dessous. Le premier utilise une approche classique tandis que le second tire parti des capacit√©s du DSL de Kotlin. De plus, nous utilisons une cha√Æne litt√©rale plus lisible.</li></ul>`,47)),e(p,null,{default:t(()=>[e(i,{title:"Sans DSL (Test Get All)"},{default:t(()=>a[0]||(a[0]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt","data-title":"kt"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"testWithClassicApproach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    mockMvc"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"perform"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"status"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("isOk"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"content"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"containsString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"[]"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e(i,{title:"Avec DSL (Test Get Single)"},{default:t(()=>a[1]||(a[1]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt","data-title":"kt"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"`test GET a single product`"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    mockMvc"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"/product/1"')]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"andExpect"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        status "),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"isOk"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.name"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"A"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token function"},"jsonPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"$.price"')]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        content "),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token function"},"contentType"),n("span",{class:"token punctuation"},"("),s("MediaType"),n("span",{class:"token punctuation"},"."),s("APPLICATION_JSON"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})]),_:1}),a[3]||(a[3]=l(`<ul><li>En guise d&#39;exercice, √©crire des tests pour les autres points d&#39;acc√®s.</li></ul><div class="hint-container tip"><p class="hint-container-title">Le constructeur de requ√™tes de JpaRepository</p><p>Les <strong>repository</strong> Spring impl√©mentent des requ√™tes bas√©es sur le nom de leurs m√©thodes. Par exemple, pour obtenir tous les produits tri√©s par nom, nous pouvons ajouter cette m√©thode √† l&#39;interface.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">interface</span> ProductRepository <span class="token operator">:</span> JpaRepository<span class="token operator">&lt;</span>Produit<span class="token punctuation">,</span> Long<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">findAllByOrderByNameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>Produit<span class="token operator">&gt;</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La [documentation officielle] (<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation</a>) fournit des explications et des exemples plus d√©taill√©s.</p></div><h3 id="projets-termines" tabindex="-1"><a class="header-anchor" href="#projets-termines"><span>Projets termin√©s</span></a></h3><ul><li><a href="https://github.com/worldline/learning-kotlin/tree/master/material/ktor-api" target="_blank" rel="noopener noreferrer">Projet Ktor</a></li><li><a href="https://github.com/worldline/learning-kotlin/tree/master/material/kotlin-nodejs-demo" target="_blank" rel="noopener noreferrer">Projet node.js</a></li><li><a href="https://github.com/worldline/learning-kotlin/tree/master/material/spring-boot-kt-api" target="_blank" rel="noopener noreferrer">Projet Spring boot</a></li></ul><h2 id="aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#aller-plus-loin"><span>Aller plus loin</span></a></h2><p>Ces tutoriels officiels vont encore plus loin :</p><ul><li><a href="https://kotlinlang.org/docs/jvm-spring-boot-restful.html" target="_blank" rel="noopener noreferrer">Ce tutoriel de kotlinlang</a> montre comment cr√©er un service web RESTful avec une base de donn√©es en utilisant Spring Boot.</li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener noreferrer">Ce tutoriel de spring.io</a> montre comment construire une application web avec Spring Boot et Kotlin.</li><li><a href="https://spring.io/guides/tutorials/rest/" target="_blank" rel="noopener noreferrer">Rest APIs with Spring</a></li><li><a href="https://quarkus.io/guides/kotlin" target="_blank" rel="noopener noreferrer">Quarkus et Kotlin</a></li></ul><h2 id="lien-et-references" tabindex="-1"><a class="header-anchor" href="#lien-et-references"><span>Lien et r√©f√©rences</span></a></h2><ul><li><a href="https://dev.to/mpetuska/js-in-kotlinjs-c4g" target="_blank" rel="noopener noreferrer">JS et Kotlin/JS</a></li><li><a href="https://www.baeldung.com/kotlin/mockmvc-kotlin-dsl" target="_blank" rel="noopener noreferrer">mockmvc kotlin dsl</a></li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener noreferrer">spring-boot-kotlin tutorial</a></li><li><a href="https://www.baeldung.com/kotlin/jpa" target="_blank" rel="noopener noreferrer">Kotlin et JPA</a></li><li><a href="https://stackoverflow.com/questions/47143127/spring-data-jpa-how-to-use-kotlin-nulls-instead-of-optional" target="_blank" rel="noopener noreferrer">Spring Data JPA Comment utiliser les nulls Kotlin au lieu de Optional</a></li></ul>`,9))])}const g=c(d,[["render",k],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/fr/backend-development/","title":"üìö D√©veloppement du backend","lang":"fr-FR","frontmatter":{},"headers":[{"level":2,"title":"Ktor","slug":"ktor","link":"#ktor","children":[{"level":3,"title":"TP : d√©velopper une API avec Ktor","slug":"tp-developper-une-api-avec-ktor","link":"#tp-developper-une-api-avec-ktor","children":[]}]},{"level":2,"title":"node.js","slug":"node-js","link":"#node-js","children":[{"level":3,"title":"TP : API Rest avec Kotlin/JS et Express","slug":"tp-api-rest-avec-kotlin-js-et-express","link":"#tp-api-rest-avec-kotlin-js-et-express","children":[]}]},{"level":2,"title":"Spring framework","slug":"spring-framework","link":"#spring-framework","children":[{"level":3,"title":"TP : Spring boot part 1 - d√©velopper la m√™me API avec Spring Boot","slug":"tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot","link":"#tp-spring-boot-part-1-developper-la-meme-api-avec-spring-boot","children":[]},{"level":3,"title":"TP : Spring boot partie 2 - ajouter une base de donn√©es","slug":"tp-spring-boot-partie-2-ajouter-une-base-de-donnees","link":"#tp-spring-boot-partie-2-ajouter-une-base-de-donnees","children":[]},{"level":3,"title":"TP : Spring boot partie 3 - ajouter des tests","slug":"tp-spring-boot-partie-3-ajouter-des-tests","link":"#tp-spring-boot-partie-3-ajouter-des-tests","children":[]},{"level":3,"title":"Projets termin√©s","slug":"projets-termines","link":"#projets-termines","children":[]}]},{"level":2,"title":"Aller plus loin","slug":"aller-plus-loin","link":"#aller-plus-loin","children":[]},{"level":2,"title":"Lien et r√©f√©rences","slug":"lien-et-references","link":"#lien-et-references","children":[]}],"git":{"updatedTime":1742570977000,"contributors":[{"name":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":1}]},"filePathRelative":"fr/backend-development/README.md"}');export{g as comp,b as data};
