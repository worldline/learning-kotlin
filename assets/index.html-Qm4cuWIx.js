import{_ as n}from"./kotlin-wasm-webapp-R4_9ho9v.js";import{_ as t,c as a,a as o,o as s}from"./app-D-YqA8eI.js";const l="/learning-kotlin/assets/launch-android-app-BS4WBFFP.png",i="/learning-kotlin/assets/hello-compose-demo-B4DIIuDy.gif",r={};function p(c,e){return s(),a("div",null,e[0]||(e[0]=[o('<h1 id="üìö-frontend-development" tabindex="-1"><a class="header-anchor" href="#üìö-frontend-development"><span>üìö Frontend development</span></a></h1><p>Kotlin supports a wide selection of frontend frameworks across all platforms: mobile, desktop and web.</p><p>Please find below a glimpse of the possibilities that you can do right from IntelliJ:</p><ul><li>On the <strong>Desktop</strong> side <ul><li>Thanks to JVM support, Kotlin supports <a href="https://openjfx.io/" target="_blank" rel="noopener noreferrer">JavaFX</a> (There <em>was</em> a Kotlin counterpart called <a href="https://tornadofx.io/" target="_blank" rel="noopener noreferrer">tornadofx</a> which is not maintained anymore).</li><li><a href="https://www.jetbrains.com/lp/compose-mpp/" target="_blank" rel="noopener noreferrer">Compose Multiplatform</a> brings Jetpack Compose to the desktop, the web and mobile.</li></ul></li><li>On the <strong>Web</strong><ul><li><a href="https://ktor.io/docs/creating-interactive-website.html" target="_blank" rel="noopener noreferrer">Ktor</a> can use templates engines <a href="https://freemarker.apache.org/" target="_blank" rel="noopener noreferrer">such as FreeMarker</a> to create server pages.</li><li>With <strong>KotlinJS</strong>, developers can create React, nodsjs, or vanilla JS Apps using Kotlin.</li><li>Kotlin <strong>WASM</strong> compiles into <em>Web Assembly</em>. It can complement KotlinJS for computation intensive tasks.</li></ul></li><li>On <strong>Mobiles</strong><ul><li>Android developers use the <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noopener noreferrer">Jetpack Compose</a> UI Framework or the legacy <strong>xml layouts</strong>. It is experimental on iOS.</li></ul></li></ul><p>Kotlin supports cross platform frontend development thanks to <strong>Kotlin MultiPlatform (KMP)</strong></p><h2 id="kotlin-multiplatform-kmp" tabindex="-1"><a class="header-anchor" href="#kotlin-multiplatform-kmp"><span>Kotlin Multiplatform (KMP)</span></a></h2><blockquote><p>&quot;The Kotlin Multiplatform technology is designed to simplify the development of cross-platform projects. It reduces time spent writing and maintaining the same code for different platforms while retaining the flexibility and benefits of native programming.&quot; <a href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noopener noreferrer">‚ÇÅ</a></p></blockquote><p><a href="https://blog.jetbrains.com/kotlin/2021/08/compose-multiplatform-goes-alpha/" target="_blank" rel="noopener noreferrer">KMP</a> relies on Kotlin native and other Kotlin features to help developers create projects that target multiple platforms using a common Kotlin code-base.</p><p><img src="https://kotlinlang.org/docs/images/kotlin-multiplatform.svg" alt="KMP"></p><p>Many combinations of targets and use cases are possible:</p><ul><li><a href="https://kotlinlang.org/docs/multiplatform-full-stack-app.html" target="_blank" rel="noopener noreferrer">Full-Stack web apps</a>: A project that contains a backend and a web app while sharing common logic.</li><li><a href="https://kotlinlang.org/docs/multiplatform-library.html" target="_blank" rel="noopener noreferrer">Multiplatform libraries</a></li></ul><h2 id="kotlin-js-and-kotlin-wasm" tabindex="-1"><a class="header-anchor" href="#kotlin-js-and-kotlin-wasm"><span>Kotlin/JS and Kotlin/WASM</span></a></h2><ul><li>Kotlin/JS can also target the web and even use web frameworks (such as react) in Kolitn.</li><li>Kotlin WASM is another possibility to target the web but this will generate WASM instead of pure JS code. <ul><li>It can be used for example to develop computation intensive libraries.</li></ul></li><li>Maybe we can do even more in the future with as all these technologies (Kotlin, WASM and Kotlin/WASM) evolve. - For example, <a href="https://wasi.dev/" target="_blank" rel="noopener noreferrer">WASI</a> allows WASM to communicate with the operating system. - This means that me may see Kotlin/WASM project projects in the future that can target both the browser and the OS.</li><li>Let&#39;s keep watching üòÑ.</li></ul><h3 id="üß™-kotlin-wasm-web-app" tabindex="-1"><a class="header-anchor" href="#üß™-kotlin-wasm-web-app"><span>üß™ Kotlin/WASM web app</span></a></h3><ul><li>Let&#39;s create a Kotlin/WASM app. By cloning <code>git clone git@github.com:Kotlin/kotlin-wasm-examples.git</code> and opening the <strong>browser-example</strong> folder in your IDE. <ul><li>To get up to date information on how to start a Kotlin/WASM project, please refer to the <a href="https://kotlinlang.org/docs/wasm-get-started.html" target="_blank" rel="noopener noreferrer">official documentation for kotlin/wasm</a>.</li></ul></li><li>Open the project and run the <code>wasmJsBrowserRun</code> task.</li><li>The development server should start and you can open your WASM powered webapp on <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">http://localhost:8080/</a><ul><li>‚ö†Ô∏è You may need to activate some flags on your browser for the app to work. If you see a blank page, please read the browser logs to check for the instructions.</li></ul></li></ul><p><img src="'+n+`" alt="Alt text"></p><ul><li>Please check the contents of <strong>src/wasmJsMain/kotlin/Simple.kt</strong> to understand how the page is coded.</li><li>Next, let&#39;s check the generated wasm file which is available in <strong>build/js/packages/project_name/kotlin</strong><ul><li>WASM being a binary format, we need to convert it first to text format.</li><li>We can either install <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener noreferrer">WABT (The WebAssembly Binary Toolkit or wabbit)</a> and use the <em>wasm2wattool</em> <code>wasm2wat --enable-all -v .\\kotlin-wasm-demo-wasm.wasm -o wasm.wat</code>,</li><li>or use an online converter <a href="https://webassembly.github.io/wabt/demo/wasm2wat/" target="_blank" rel="noopener noreferrer">such as this one</a></li><li>‚ùó However, I couldn&#39;t get it to work (yet).</li></ul></li></ul><h3 id="kotlin-js-and-kotlin-wasm-common-points" tabindex="-1"><a class="header-anchor" href="#kotlin-js-and-kotlin-wasm-common-points"><span>Kotlin/JS and Kotlin/WASM common points</span></a></h3><p>Both Kotlin/WASM and Kotlin/JS IntelliJ work somewhat similarly.</p><ul><li>Both rely on the KMP plugin</li><li>Kotlin/WASM is enabled by adding a <code>wasmjs</code> section in the <code>build.gradle.kts</code> file, while Kotlin/JS is enabled by adding a <code>js</code> section.</li><li>The Kotlin code will compile to WASM and / or JS. Kotlin/JS generates only JS while Kotin/WASM generates both JS and WASM.</li><li>In both cases, the entry point of the generated code is a JS file called <strong>module_name.js</strong>.</li><li>The <strong>index.html</strong> in the resources folder loads the generated JS explained above (the one named <strong>module_name.js</strong>).</li><li>The task <code>wasmBrowserDevelopmentRun</code> or <code>jsWasmBrowserDevelopmentRun</code> run a local server that hosts both the <strong>index.html</strong> files and the generated JS and WASM files.</li></ul><h2 id="compose-multiplatform" tabindex="-1"><a class="header-anchor" href="#compose-multiplatform"><span>Compose multiplatform</span></a></h2><blockquote><p>&quot;Compose Multiplatform simplifies and accelerates UI development for Desktop and Web applications, and allows extensive UI code sharing between Android, iOS, Desktop and Web. It&#39;s a modern toolkit for building native UI. Quickly bring your app to life with less code, powerful tools, and intuitive Kotlin APIs.&quot;</p></blockquote><p><img src="https://www.jetbrains.com/lp/compose-multiplatform/static/code-1-359257c1e103ebc01b8eb4662a61f733.svg" alt="img"></p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token function">Button</span><span class="token punctuation">(</span></span>
<span class="line">  onClick <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pressed!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">platform</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is based on <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noopener noreferrer">Android Jetpack Compose</a> declarative UI approach ( which is similar also to <a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noopener noreferrer">iOS SwiftUI</a> ) <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noopener noreferrer">1</a></p><div class="hint-container tip"><p class="hint-container-title">Compose multiplatform vs Jetpack Compose</p><p>While very similar, Compose multiplatform is different from Jetpack Compose as the latter is only compatible with Android. Google provides a <a href="https://developer.android.com/jetpack/compose/tutorial" target="_blank" rel="noopener noreferrer">JetPack compose tutorial</a> for Android development.</p></div><div class="hint-container warning"><p class="hint-container-title">Compose HTML is not cross-platform</p><p>Compose HTML is UI a library targeting Kotlin/JS which is not compatible with Compose Multiplatform (it is a different API). For cross-platform UI development with Compose Multiplatform, compose Web is the choice.</p></div><h3 id="üß™-create-a-compose-multiplatform-app" tabindex="-1"><a class="header-anchor" href="#üß™-create-a-compose-multiplatform-app"><span>üß™ Create a Compose multiplatform app</span></a></h3><p>We&#39;ll create a multiplatform app using the <a href="https://github.com/JetBrains/compose-multiplatform-template" target="_blank" rel="noopener noreferrer">official template</a>. At the time of writing, this template does not include a compose web target.</p><ul><li>Please check that your environment is correctly setup <a href="https://github.com/JetBrains/compose-multiplatform-template#set-up-the-environment" target="_blank" rel="noopener noreferrer">as explained here</a>. <ul><li>On Windows and Linux, we don&#39;t need to install iOS/macOS related tools but and we won&#39;t be able to run iOS/macOS targets.</li><li>If we don&#39;t want to install Android Studio, we need at least to install the Android SDK either through the official installer or from the <em>&quot;Languages and Framework -&gt; Android SDK&quot;</em> menu in the settings.</li></ul></li><li>Open the <a href="https://github.com/JetBrains/compose-multiplatform-template" target="_blank" rel="noopener noreferrer">official template</a> and either download a zip or use the &quot;<em>use this template</em>&quot; options on GitHub.</li><li>Open the downloaded projet. You&#39;ll note that it contains these modules: <ul><li>a <strong>shared</strong> module (or subproject) that contains common code as well as</li><li>and another module for earch targeted platform: androidApp, iOSApp and desktopApp (When web will be included in the template, we should also see a webApp project). These contain the source code of the apps itself (such as the main activity in Android, the <code>@main App</code> in iOS and the main function in desktopJVM) and well as platform specific resources that cannot be placed in the <em>shared</em> module. Some examples of such files are the <em>AndroidManifest.xml</em> for android and the <strong>info.plist</strong> in iOS.</li></ul></li><li>In order to run the desktopApp, open a terminal on the project root folder and launch this command: <code>./gradlew desktopApp:run</code>.</li><li>In order to run the Android App, the simplest way is to launch it from IntelliJ <img src="`+l+`" alt="Alt text">. It is also possible <a href="https://gist.github.com/MoshDev/a61080cc5e1f5bafdf3cc0bf70fd86fd" target="_blank" rel="noopener noreferrer">define a gradle task</a> that installs the app on the device and issues a command to the device to launch it.</li><li>In order to run the iOS App, the simplest way is to run it on the simulator using IntelliJ. In order to run it on a real device, the TramID needs to be defined as <a href="https://github.com/JetBrains/compose-multiplatform-template#on-ios" target="_blank" rel="noopener noreferrer">explained here</a></li></ul><p>![Alt text](../../assets/kmp-compose-desktop.png =200x)</p><h3 id="üß™-playing-with-the-compose-multiplatform-api" tabindex="-1"><a class="header-anchor" href="#üß™-playing-with-the-compose-multiplatform-api"><span>üß™ Playing with the Compose multiplatform API</span></a></h3><p>Compose multiplatform is a component based declarative UI framework. Each component is called a <code>Composable</code> and is defined as a function annotated with <code>@Composable</code>.</p><p>In compose multiplatform, the main component (the component at the root of the App) is usually found in <strong>shared/src/commonMain/Kotlin/App.kt</strong>.</p><ul><li>Take a look at <strong>shared/src/commonMain/Kotlin/App.kt</strong>, run the app and try to understand how compose works.</li><li>Let&#39;s create a new composable called <code>RandomNumberList</code>.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">RandomNumberList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Generate a list of random numbers</span></span>
<span class="line">    <span class="token keyword">val</span> myRandomValues <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// LazyColumn is a vertically scrolling list that renders items on demand</span></span>
<span class="line">    LazyColumn <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">items</span><span class="token punctuation">(</span>myRandomValues<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Place this composable below <code>AnimatedVisibility</code> and <code>Button</code> and run the app.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">Button(onClick ...</span>
<span class="line">AnimatedVisibility(showImage) { ...</span>
<span class="line">*/</span></span>
<span class="line"><span class="token function">RandomNumberList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Exercise: Make the &quot;Hello, ..&quot; button switch between showing the list and and the image.</li></ul><p><img src="`+i+'" alt="Hello compose demo"></p><h2 id="üéØ-solutions" tabindex="-1"><a class="header-anchor" href="#üéØ-solutions"><span>üéØ Solutions</span></a></h2><ul><li><a href="https://github.com/worldline/learning-kotlin/tree/main/material/webapp-kotlin-wasm" target="_blank" rel="noopener noreferrer">Kotlin/JS and Kotlin/WASM PW</a></li><li><a href="https://github.com/worldline/learning-kotlin/tree/main/material/app-compose-multiplatform" target="_blank" rel="noopener noreferrer">Compose multiplatform PW2</a></li></ul><h2 id="üìñ-further-reading" tabindex="-1"><a class="header-anchor" href="#üìñ-further-reading"><span>üìñ Further reading</span></a></h2><ul><li><a href="https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/" target="_blank" rel="noopener noreferrer">The huge potential of Kotlin/WASM</a></li><li><a href="https://kmp.jetbrains.com/" target="_blank" rel="noopener noreferrer">Official KMP wizard</a></li></ul>',44)]))}const u=t(r,[["render",p],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/en/front-development/","title":"üìö Frontend development","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Kotlin Multiplatform (KMP)","slug":"kotlin-multiplatform-kmp","link":"#kotlin-multiplatform-kmp","children":[]},{"level":2,"title":"Kotlin/JS and Kotlin/WASM","slug":"kotlin-js-and-kotlin-wasm","link":"#kotlin-js-and-kotlin-wasm","children":[{"level":3,"title":"üß™ Kotlin/WASM web app","slug":"üß™-kotlin-wasm-web-app","link":"#üß™-kotlin-wasm-web-app","children":[]},{"level":3,"title":"Kotlin/JS and Kotlin/WASM common points","slug":"kotlin-js-and-kotlin-wasm-common-points","link":"#kotlin-js-and-kotlin-wasm-common-points","children":[]}]},{"level":2,"title":"Compose multiplatform","slug":"compose-multiplatform","link":"#compose-multiplatform","children":[{"level":3,"title":"üß™ Create a Compose multiplatform app","slug":"üß™-create-a-compose-multiplatform-app","link":"#üß™-create-a-compose-multiplatform-app","children":[]},{"level":3,"title":"üß™ Playing with the Compose multiplatform API","slug":"üß™-playing-with-the-compose-multiplatform-api","link":"#üß™-playing-with-the-compose-multiplatform-api","children":[]}]},{"level":2,"title":"üéØ Solutions","slug":"üéØ-solutions","link":"#üéØ-solutions","children":[]},{"level":2,"title":"üìñ Further reading","slug":"üìñ-further-reading","link":"#üìñ-further-reading","children":[]}],"git":{"updatedTime":1742570977000,"contributors":[{"name":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":1}]},"filePathRelative":"en/front-development/README.md"}');export{u as comp,h as data};
